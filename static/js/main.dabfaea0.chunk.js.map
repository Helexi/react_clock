{"version":3,"sources":["components/Clock.tsx","App.tsx","index.tsx"],"names":["Clock","state","time","Date","toLocaleTimeString","timerId","this","setInterval","date","setState","console","log","prevProps","name","props","clearInterval","React","Component","App","visible","hideClock","showClock","rendomStr","Math","ceil","random","className","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"yLAGaA,EAAb,4MACEC,MAAQ,CACNC,MAAM,IAAIC,MAAOC,sBAFrB,EAKEC,aALF,yDAOE,WAAqB,IAAD,OAClBC,KAAKD,QAAUE,aAAY,WACzB,IAAMC,GAAO,IAAIL,MAAOC,qBAExB,EAAKK,SAAS,CAAEP,KAAMM,IAGtBE,QAAQC,IAAIH,KACX,OAfP,gCAkBE,SAAmBI,GACAA,EAATC,OAEKP,KAAKQ,MAAMD,MAEtBH,QAAQC,IAAR,0BAA+BC,EAAUC,KAAzC,eAAoDP,KAAKQ,MAAMD,SAvBrE,kCA2BE,WACMP,KAAKD,SACPU,cAAcT,KAAKD,WA7BzB,oBAiCE,WACE,OACE,8CAEGC,KAAKL,MAAMC,YArCpB,GAA2Bc,IAAMC,WCO3BC,E,4MACJjB,MAAQ,CACNY,KAAM,EACNM,SAAS,G,EAGXC,UAAY,WACV,EAAKX,SAAS,CACZU,SAAS,K,EAIbE,UAAY,WACV,EAAKZ,SAAS,CACZU,SAAS,K,EAIbG,UAAY,WACV,IAAMA,EAAYC,KAAKC,KAAqB,IAAhBD,KAAKE,UAEjC,EAAKhB,SAAS,CACZI,KAAMS,K,4CAIV,WACE,OACE,mCACE,sBAAKI,UAAU,MAAf,UACE,6CACA,wBAAQC,KAAK,SAASC,QAAStB,KAAKe,UAApC,wBACA,wBAAQM,KAAK,SAASC,QAAStB,KAAKc,UAApC,wBACA,wBAAQO,KAAK,SAASC,QAAStB,KAAKgB,UAApC,sCAIChB,KAAKL,MAAMkB,SAAW,cAAC,EAAD,CAAON,KAAMP,KAAKL,MAAMY,gB,GArCvCG,IAAMC,WA4CTC,ICnDfW,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.dabfaea0.chunk.js","sourcesContent":["import React from 'react';\nimport { Props, State } from './types';\n\nexport class Clock extends React.Component<Props, State> {\n  state = {\n    time: new Date().toLocaleTimeString(),\n  };\n\n  timerId?: NodeJS.Timeout;\n\n  componentDidMount() {\n    this.timerId = setInterval(() => {\n      const date = new Date().toLocaleTimeString();\n\n      this.setState({ time: date });\n\n      // eslint-disable-next-line\n      console.log(date);\n    }, 1000);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { name } = prevProps;\n\n    if (name !== this.props.name) {\n      // eslint-disable-next-line no-console\n      console.log(`Rendom name was ${prevProps.name} to ${this.props.name}`);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.timerId) {\n      clearInterval(this.timerId);\n    }\n  }\n\n  render() {\n    return (\n      <p>\n        Current time:\n        {this.state.time}\n      </p>\n    );\n  }\n}\n","import React from 'react';\nimport { Clock } from './components/Clock';\n\ntype Props = {};\n\ntype State = {\n  name: number,\n  visible: boolean,\n};\n\nclass App extends React.Component<Props, State> {\n  state = {\n    name: 0,\n    visible: true,\n  };\n\n  hideClock = () => {\n    this.setState({\n      visible: false,\n    });\n  };\n\n  showClock = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  rendomStr = () => {\n    const rendomStr = Math.ceil(Math.random() * 100);\n\n    this.setState({\n      name: rendomStr,\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <h1>React clock</h1>\n          <button type=\"button\" onClick={this.showClock}>Show clock</button>\n          <button type=\"button\" onClick={this.hideClock}>Hide clock</button>\n          <button type=\"button\" onClick={this.rendomStr}>\n            Rendom number in console\n          </button>\n\n          {this.state.visible && <Clock name={this.state.name} />}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}